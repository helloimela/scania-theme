$link-color: #909090;
$link-color-hover: darken($link-color, 40%);

%nav-item {
  color: $link-color; // Fallback for non supported browsers
  color: var(--link-color);
  padding: 10px 25px;
  text-decoration: none;
}
%nav-item-separator {
  border-top: 1px solid #e2e2e2;
}
// Sass compiler renders :hover and :before differently
// and this is due to browsers lackof support
%nav-link-hover {
  --link-color: var(--link-color-hover);

  color: $link-color-hover; // Fallback for non supported browsers
  color: var(--link-color-hover);
}

:host {
  --link-color: #{$link-color};
  --link-color-hover: #{$link-color-hover};

  background-color: #f5f5f5;
  display: flex;
  font-family: 'Scania Sans';
  font-size: 1.4rem;
  font-weight: bold;
  text-transform: uppercase;
  overflow: hidden;
}
:host([slot=sub]) {
  background-color: #fff;
  display: none;
  text-transform: capitalize;
  font-weight: normal;
}
:host([slot=sub][open=true]),
:host([slot=sub].open) {
  display: block;
}
// If we can fix the bug in the css parser for ie
// Then this rule needs to have [open] as well
:host([open=true]:not([slot=sub])),
:host(.open:not([slot=sub])) {

  > .navbar {
    margin-left: -100%;
  }
}

::slotted(a) {
  @extend %nav-item;
}
::slotted(a:not(:first-child)) {
  @extend %nav-item-separator;
}
// Due to browsers not supporting: ::slotted(a):hover
// we need to have the hover separated instead of nested
::slotted(a:hover),
::slotted(a.active),
::slotted(a[active]) {
  @extend %nav-link-hover;
}

ul {
  margin: 0;
}

.navbar {
  display: block;
  padding: 0;
  transition: margin 250ms ease;
  order: -1; /* This is needed for ie - due to it beeing render after slots */

  .navbar-nav {

    .nav-item {
      @extend %nav-item;

      &.nav-link {

        &:hover,
        &.active,
        &[active] {
          @extend %nav-link-hover;
        }
      }
      &.toggle-sub {
        position: relative;
        background-color: #f5f5f5;
      }

      + .nav-item {
        @extend %nav-item-separator;
      }
    }
    .caption {
      display: none;
    }
  }
}
:host([slot=sub]),
.navbar {
  min-width: 100%;
}
.navbar-collapse {
  transition: max-height 550ms ease-in;
  max-height: 100vh;
  overflow: hidden;

  &:not(.show) {
    display: block;
    max-height: 0;
  }

  + .navbar-collapse {
    border-top: 1px solid #e2e2e2;
  }
}
.sub-navigation {
  overflow: hidden;
  border-top: 1px solid #d3d3d3;
}

@media (min-width: 992px) {

  %nav-item-desktop {
    padding: 20px 0;

    &:before,
    &:after {
      content: "";
      padding: 0 15px;
    }
  }
  %nav-item-sub-desktop {
    padding: 10px 14px;

    &:before,
    &:after {
      content: none;
    }
  }
  %nav-item-separator-desktop {
    border-top: none;
  }
  %nav-item-separator-desktop-before {
    border-left: 1px solid #e2e2e2;
  }

  :host {
    background-color: #fff;
    overflow: visible;
    flex-direction: column;
  }
  :host([slot=sub]) {
    background-color: #f5f5f5;
    border-top: 1px solid #d3d3d3;
    padding: 0 15px;

    ::slotted(a) {
      @extend %nav-item-sub-desktop;
    }

    .navbar {
      
      .navbar-nav {

        .nav-item {
          @extend %nav-item-sub-desktop;
        }
        .caption {
          display: block;
          color: #000;
          text-transform: uppercase;
  
          &:after {
            content: "";
            border-right: 1px solid #e2e2e2;
            padding: 0 15px;
          }
        }
      }
    }
  }
  :host([slot=sub][open]),
  :host([slot=sub].open) {
    display: none;
  }
  :host([slot=sub][active]),
  :host([slot=sub].active) {
    display: block;
  }
  // We have a bug in the css parser for ie, it cant handle multiple :not
  // Would like to have: :host([open=true]:not([open=false]):not([slot=sub])),
  :host([open=true]:not([slot=sub])),
  :host(.open:not([slot=sub])) {

    > .navbar {
      margin-left: 0;
    }
  }

  ::slotted(a) {
    @extend %nav-item-desktop;
  }
  ::slotted(a:not(:first-child)) {
    @extend %nav-item-separator-desktop;

    &:before {
      @extend %nav-item-separator-desktop-before;
    }
  }
  ::slotted(a[slot="secondary-items"]):before {
    border-left: 0;
  }
  ::slotted(a[slot="secondary-items"]:not(:last-child)):after {
    border-right: 1px solid #e2e2e2;
  }

  .navbar {
    display: flex;
    transition: none;

    .navbar-nav {

      .nav-item {
        @extend %nav-item-desktop;

        border-top: 0;

        + .nav-item {
          @extend %nav-item-separator-desktop;

          &:before {
            @extend %nav-item-separator-desktop-before;
          }
        }
      }
    }
    .navbar-collapse {
      max-height: none;

      + .navbar-collapse {
        overflow: visible;
        border-top: 0;
      }
    }
  }
}
